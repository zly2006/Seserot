import seserot.io.File
import seserot.io.print

function main() {
    print("Hello World!")
    val a = A<Int>(1)
    a.t.toString()
    [1,2,"",1.0] //: List<Object> (自动退化)
    {a:1} // class { val a : Int }
    (1, "") //: Tuple<Int, String>
    test()
}

trait A {
    function a() : Int {
        return 0
    }
}

class A<T> where (T is Number) {
    private val value: T

    constructor (value /*auto initialize member*/)
        /* optional function body */
    public function print() {
        print(value)
    }
    public function load() {
        val a = File.readText("a.txt")?[1..]
        // do something

    }
    // private / protected / internal / public
    // friend function main()//(friend not implemented)
    // friend function test(a: Int /*Int is optional*/)
}

operator add<T, P>(t: T, p: P) {
    return t.toString() + p.toString()
}

struct B { //: Value, 1byte
    async function printHello() {
        async print("Hello")
    }
}

function bar(obj: Object) {
    println(ref.toString())
}

function test() {
    val b = B()
    val a = new A<int>(2)
    sizeof(A)//invalid
    sizeof(B)//OK
    bar(b)
    bar(a)
    var refB = b //: B&
    sizeof(refB) //invalid
    bar(refB)
    await ret1()//1
    ret1() + 2 //: async Int
    await (ret1() + 2) //: Int
}

async function ret1(): Int {
    return 1
}
